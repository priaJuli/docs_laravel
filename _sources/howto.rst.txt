
How to doing Tricks
=====================

.. image:: images/logomarklaravel.min.svg

Section ini, adalah tutorial sederhana & langkah2 yang efisien dalam belajar **everything** tentang laravel. Sebelum memulai, diharapkan sudah menguasai cara instalasi, dan membuat .env dalam project laravel anda.

===========================
Hello World base page & API
===========================

**Base page Hello World**

Dalam bahasan kali ini, mari kita coba yang paling sederhana yaitu menampilkan Kata Emas dari belajar Developer yaitu "Hello World".

Secara simple nya, cukup menambahkan routing pada file routes/web.php seperti contoh berikut::

	File routes/web.php

	<?php

	use Illuminate\Support\Facades\Route;

	/*
	|--------------------------------------------------------------------------
	| Web Routes
	|--------------------------------------------------------------------------
	|
	| Here is where you can register web routes for your application. These
	| routes are loaded by the RouteServiceProvider within a group which
	| contains the "web" middleware group. Now create something great!
	|
	*/

	Route::get('/hello', function () {
	    echo "Hello world";
	});

Setelah menambahkan baris yang ada diatas, mari kita test dengan mengakses halaman base route **http://localhost/project_laravel/public/test**	atau dengan script shell pada cmd **php artisan serve** dapat diakses pada halaman **http://127.0.0.1:8000/hello** .

Nah sekarang kita akan coba membuat API simple dengan methode GET untuk menampilkan kata "Hello world". Sama seperti cara menambahkan pada routes/web.php kali ini baris kode akan ditambahkan pada file routes/api.php seperti contoh berikut::

	File routes/api.php

	<?php

	use Illuminate\Http\Request;
	use Illuminate\Support\Facades\Route;

	/*
	|--------------------------------------------------------------------------
	| API Routes
	|--------------------------------------------------------------------------
	|
	| Here is where you can register API routes for your application. These
	| routes are loaded by the RouteServiceProvider within a group which
	| is assigned the "api" middleware group. Enjoy building your API!
	|
	*/

	Route::get('/hello', function () {
    	echo "Hello world";
	});

Setelah kita menambahkan baris yg ada diatas, mari kita test dengan mengakses link **http://127.0.0.1:8000/api/hello** , berbeda dengan halaman page API hanya bisa diakses dari endpoint api/{route_api} . API akan digunakan pada section lebih lanjut.

================================
Specified key was too long error
================================

Error berikut adalah error dimana akan melakukan migrasi table dan attribut table melebihi dari batasan MySQL yang ada. Error ini dapat diatasi dengan cara mengupdate file **app/Providers/AppServiceProvider.php**. 

Baris kode berikut::

	use Illuminate\Support\Facades\Schema;

Ditambahkan pada **AppServiceProvider.php** setelah baris **namespace App\Providers;**.

Dan baris kode berikut ditambahkan pada fungsi boot()::

	public function boot()
	{
	    Schema::defaultStringLength(191);
	}

=========================
Basic Auth Laravel
=========================

Laravel sudah memiliki bantuan untuk membuat fitur login dan signup secara gratis, Laravel basic Auth sudah tersedia otomatis pada Versi 6 dan versi lebih lanjut. Untuk versi 5.5, 5.6, 5.7, 5.8 auth dapat dibuat dengan tahapan awal adalah dengan menjalankan script berikut pada cmd::

	$ php artisan make:auth

Setelah menjalankan script diatas, akan ada beberapa file yang akan digenerate antara lain:

#. app/Http/Controllers/Auth/ForgotPasswordController.php
#. app/Http/Controllers/Auth/LoginController.php
#. app/Http/Controllers/Auth/RegisterController.php
#. app/Http/Controllers/Auth/ResetPasswordController.php
#. routes/web.php
#. resources/views/auth/login.blade.php
#. resources/views/auth/register.blade.php
#. resources/views/auth/passwords/email.blade.php
#. resources/views/auth/passwords/reset.blade.php

**Forgot Password**

File **app/Http/Controllers/Auth/ForgotPasswordController.php**, controller ini akan menghandle fungsi forgot password dimana akan melakukan reset password pada user.

**Basic Login Laravel**

File **app/Http/Controllers/Auth/LoginController.php**, controller ini akan menghandle fungsi login. Secara default, setelah login akan diarahkan ke routes/halaman home (http://127.0.0.1:8000/home). Aksi redirect ini dapat dirubah dengan mengganti baris kode berikut::

	File LoginController.php

	........

	class LoginController extends Controller
	{
    /*
    |--------------------------------------------------------------------------
    | Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles authenticating users for the application and
    | redirecting them to your home screen. The controller uses a trait
    | to conveniently provide its functionality to your applications.
    |
    */

    use AuthenticatesUsers;

    /**
     * Where to redirect users after login.
     *
     * @var string
     */
    protected $redirectTo = '/dashboard'; 
    // baris ini dapat diganti sesuai routes dashboard yang anda buat.

    .........

**Basic Register Laravel**

File **app/Http/Controllers/Auth/RegisterController.php**, controller ini akan menghandle fungsi register. Secara default, setelah user melakukan registrasi akan diarahkan ke routes/halaman home (http://127.0.0.1:8000/home). Aksi redirect ini dapat dirubah dengan mengganti baris kode berikut::

	File RegisterController.php

	.............

	class RegisterController extends Controller
	{
    /*
    |--------------------------------------------------------------------------
    | Register Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users as well as their
    | validation and creation. By default this controller uses a trait to
    | provide this functionality without requiring any additional code.
    |
    */

    use RegistersUsers;

    /**
     * Where to redirect users after registration.
     *
     * @var string
     */
    protected $redirectTo = '/dashboard';

    // baris ini dapat diganti sesuai routes dashboard yang anda buat.

    ............

**Reset Password**

File **app/Http/Controllers/Auth/ResetPasswordController.php**, controller ini akan menghandle fungsi reset password. Secara default, setelah user melakukan reset password akan diarahkan ke routes/halaman home (http://127.0.0.1:8000/home). Aksi redirect ini dapat dirubah dengan mengganti baris kode berikut::

	File ResetPasswordController.php

	.............

	class ResetPasswordController extends Controller
	{
    /*
    |--------------------------------------------------------------------------
    | Password Reset Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling password reset requests
    | and uses a simple trait to include this behavior. You're free to
    | explore this trait and override any methods you wish to tweak.
    |
    */

    use ResetsPasswords;

    /**
     * Where to redirect users after resetting their password.
     *
     * @var string
     */
    protected $redirectTo = '/dashboard';

    // baris ini dapat diganti sesuai routes dashboard yang anda buat.

    ............

**Routing Auth**

File **routes/web.php**, akan otomatis menambahkan baris kode::

	File routes/web.php

	.........

	Auth::routes();

	.........

Baris kode ini akan otomatis digenerate oleh laravel setelah menjalankan script di cmd **php artisan make:auth** jadi file **routes/web.php** bisa diabaikan. Sama halnya routes page, routes untuk api juga akan digenerate otomatis tetapi harus di modifikasi sesuai dengan kebutuhan sistem.

**Modification Model User**

Kebutuhan data user dimana ada attribut yang lain yang perlu di tambahkan ketika melakukan registrasi dapat di sesuaikan dengan kebutuhan dengan cara mengupdate model User yang ada pada File **app/User.php**. Dan untuk merubah tampilan login atau registrasi dapat di rubah pada file **resources/views/auth/login.blade.php** dan **resources/views/auth/register.blade.php**.

Perubahan struktur model user dilakukan dengan tahapan:

#. Merubah migrations user yang terdapat pada folder **database/migrations/...**.
#. Merubah struktur model user, pada file **app/User.php** pada bagian fillable, dan hidden sesuai dengan kebutuhan.

.. tip:: Model User dapat disesuaikan juga terdapat level / role dari user ketika melakukan registrasi atau login.

===============================
Penggunaan Auth pada Controller
===============================

Penggunaan auth dapat digunakan pada controller manapun jika membutuhkan data user yang telah login. Berikut contoh2 penggunaan auth user pada beberapa kasus:

#. Check apakah user sudah login atau belum / Check auth user?
#. Pengambilan data user yang telah login / Get user auth data?
#. Pada **routes/web.php** bisa ditambahkan ke routes yang ada jika syarat dari routes adalah user yang telah login saja.

Setiap penggunaan Auth pada controller dapat ditambahkan baris berikut setelah kode **namespace**::

	use Illuminate\Support\Facades\Auth;

**Check User Auth**

Pengecheckan apakah user telah login atau tidak dapat dilakukan di fungsi yang terdapat pada controller manapun, berikut baris kode yang perlu ditambahkan::

	// Check apakah user login atau tidak
	if (Auth::check()) {
	    // User login
	}

**Get User Auth Data**

Pengambilan data user dapat dilakukan dengan cara::

	use Illuminate\Support\Facades\Auth;

	// Get the currently authenticated user...
	$user = Auth::user();

Hasil dari var **$user** adalah bentuk Object dari Model User yang berisi attribut yang ada.

**Guard Routes untuk Auth User**

Pada beberapa routes yang memiliki syarat user yang login saja, dapat dilakukan dengan menambahkan beberapa baris berikut pada baris routes yang sudah dibuat. Berikut contoh::

	Route::get('profile', 'ProfileController@getProfile')->middleware('auth');

Dengan menambahkan kode **->middleware('auth');** pada routes yang sudah dibuat, akan membuat syarat user login pada routes yang di set. Pada contoh diatas, halaman http://127.0.0.1:8000/profile hanya dapat diakses oleh user yang telah login saja.

=======================
Encryption & Decryption
=======================

Laravel enckripsi menggunakan OpenSSL to provide AES-256 dan AES-128 encryption. 

**Konfig Enkripsi**

Pada File **config/app.php**, pada bagian key, secara default berisi key yang digenerate dari command **php artisan key:generate**. Option ini dapat dirubah dengan nilai static dimana hanya akan digunakan saat melakukan enkripsi, dan dekripsi.

**Encrypt Value**

Enkripsi laravel secara default menggunakan OpenSSL dan **AES-256-CBC** cipher. Berikut contoh cara penggunaan enkripsi::

	<?php

	namespace App\Http\Controllers;

	use App\User;
	use Illuminate\Http\Request;
	use App\Http\Controllers\Controller;

	class MessageController extends Controller
	{
		public function sentMessage(Request $request)
		{
			$messageEncrypt = encrypt($request->message);
			// Hasil enkripsi 

			$messageDecrypt = decrypt($messageEncrypt);
			// Dekrisi ulang

		}

	}

	........

Enkripsi juga dapat dilakukan dengan Facade dari laravel **use Illuminate\Support\Facades\Crypt;**, berikut contoh::

	<?php

		namespace App\Http\Controllers;

		use App\User;
		use Illuminate\Http\Request;
		use App\Http\Controllers\Controller;
		use Illuminate\Support\Facades\Crypt;

		class MessageController extends Controller
		{
			public function sentMessage(Request $request)
			{
				$messageEncrypt = Crypt::encryptString("Pesan String");
				// Hasil enkripsi 

				$messageDecrypt = Crypt::decryptString($messageEncrypt);
				// Dekrisi ulang

			}

		}

		........

**Decrypt Value**

Saat melakukan dekripsi value, untuk mencegah terjadinya error, dapat menggunakan try{}catch{} untuk mencegah fungsi tersebut terminated dengan menggunakan Facade **use Illuminate\Contracts\Encryption\DecryptException;**. Berikut contoh::

	<?php

		namespace App\Http\Controllers;

		use App\User;
		use Illuminate\Http\Request;
		use App\Http\Controllers\Controller;
		use Illuminate\Support\Facades\Crypt;
		use Illuminate\Contracts\Encryption\DecryptException;

		class MessageController extends Controller
		{
			public function sentMessage(Request $request)
			{
				$messageEncrypt = Crypt::encryptString("Pesan String");
				// Hasil enkripsi 

				try{
					$messageDecrypt = Crypt::decryptString($messageEncrypt);
					// Dekrisi ulang
				} catch (DecryptException $e) {
				    echo "Error Dekripsi".$e->getMessage();
				}
			}

		}

		........